openapi: '3.0.1'
info:
  version: 1.0.0
  title: Swagger Quiz Portal
  license:
    name: MIT
servers:
  - url: http://localhost:4000/
paths:
  /api/users:
    get:
      summary: all users
      tags: [Users]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  User:
                    $ref: '#/components/schemas/User'
        "404":
          description: Not Found
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
  /api/users/{id}:
    get:
      summary: get user by id
      tags: [Users]
      parameters:
        - name: id
          in: path
          type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
              example:
                id: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  User:
                    $ref: '#/components/schemas/User'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
  /api/users/create:
    post:
      summary: add user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
              example:
                name: xyz
                email: xyz@gmail.com
                password: xyz1234
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  User:
                    $ref: '#/components/schemas/User'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
  /api/users/{id}/update:
    put:
      summary: update user by id
      tags: [Users]
      parameters:
        - in: query
          name: id
          required: true
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
              example:
                name: xyz
                email: xyz@gmail.com
                password: xyz1234
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  User:
                    $ref: '#/components/schemas/User'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: User Not Found
  /api/users/{id}/delete:
    delete:
      summary: delete user by id
      tags: [Users]
      parameters:
        - in: query
          name: id
          required: true
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
              example:
                id: 1
      responses:
        "204":
          description: OK
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: User Not Found
components:
  schemas:
    User:
      type: array
      items:
        $ref: "#/components/schemas/User"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string